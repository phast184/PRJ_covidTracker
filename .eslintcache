[{"D:\\PRJ_covidTracker\\src\\index.js":"1","D:\\PRJ_covidTracker\\src\\App.js":"2","D:\\PRJ_covidTracker\\src\\context\\canadaContext.js":"3","D:\\PRJ_covidTracker\\src\\context\\globalContext.js":"4","D:\\PRJ_covidTracker\\src\\pages\\GlobalCovidPage.js":"5","D:\\PRJ_covidTracker\\src\\pages\\CanadaCovidPage.js":"6","D:\\PRJ_covidTracker\\src\\actions\\canadaActions.js":"7","D:\\PRJ_covidTracker\\src\\utils\\helpers.js":"8","D:\\PRJ_covidTracker\\src\\reducer\\canadaReducer.js":"9","D:\\PRJ_covidTracker\\src\\reducer\\globalReducer.js":"10","D:\\PRJ_covidTracker\\src\\actions\\globalActions.js":"11","D:\\PRJ_covidTracker\\src\\components\\InfoBox.js":"12","D:\\PRJ_covidTracker\\src\\components\\LineGraph.js":"13","D:\\PRJ_covidTracker\\src\\components\\Table.js":"14","D:\\PRJ_covidTracker\\src\\components\\NavBar.js":"15","D:\\PRJ_covidTracker\\src\\components\\Map\\Map.js":"16","D:\\PRJ_covidTracker\\src\\components\\Map\\ChangeView.js":"17","D:\\PRJ_covidTracker\\src\\components\\InfoBoxes.js":"18"},{"size":486,"mtime":1616313276457,"results":"19","hashOfConfig":"20"},{"size":504,"mtime":1616313276440,"results":"21","hashOfConfig":"20"},{"size":3813,"mtime":1616853446503,"results":"22","hashOfConfig":"20"},{"size":3698,"mtime":1616313276455,"results":"23","hashOfConfig":"20"},{"size":4020,"mtime":1616850668054,"results":"24","hashOfConfig":"20"},{"size":3036,"mtime":1616848557582,"results":"25","hashOfConfig":"20"},{"size":409,"mtime":1616320987423,"results":"26","hashOfConfig":"20"},{"size":2448,"mtime":1616316318023,"results":"27","hashOfConfig":"20"},{"size":1161,"mtime":1616842895514,"results":"28","hashOfConfig":"20"},{"size":1941,"mtime":1616313276461,"results":"29","hashOfConfig":"20"},{"size":478,"mtime":1616313276442,"results":"30","hashOfConfig":"20"},{"size":917,"mtime":1616313276446,"results":"31","hashOfConfig":"20"},{"size":1636,"mtime":1616853183457,"results":"32","hashOfConfig":"20"},{"size":1453,"mtime":1616317248058,"results":"33","hashOfConfig":"20"},{"size":629,"mtime":1616313276451,"results":"34","hashOfConfig":"20"},{"size":1393,"mtime":1616313276450,"results":"35","hashOfConfig":"20"},{"size":196,"mtime":1616313276448,"results":"36","hashOfConfig":"20"},{"size":1714,"mtime":1616850505832,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"14b4qbb",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"40"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"40"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"D:\\PRJ_covidTracker\\src\\index.js",[],["80","81"],"D:\\PRJ_covidTracker\\src\\App.js",[],"D:\\PRJ_covidTracker\\src\\context\\canadaContext.js",["82","83"],"import React, { useState, useEffect, useReducer, useContext } from \"react\";\r\nimport { fetchThings, buildChartData } from \"../utils/helpers\";\r\nimport reducer from \"../reducer/canadaReducer\";\r\nimport {\r\n  LOAD_ALL_PROVINCES_DATA,\r\n  LOAD_CANADA_DATA,\r\n  SET_CASE_TYPE,\r\n  SET_PROVINCE_INPUT,\r\n  LOAD_HISTORICAL_CANADA,\r\n  LOAD_HISTORICAL_PROVINCES,\r\n  SET_TYPE_INPUT,\r\n} from \"../actions/canadaActions\";\r\nimport { } from \"../actions/canadaActions\";\r\n\r\nconst initialState = {\r\n  provinces: [],\r\n  canada: [],\r\n  caseType: \"cases\",\r\n  provinceInput: \"Canada\",\r\n  typeInput: \"confirmed\",\r\n  typeInputData: [\r\n    { type: \"confirmed\", name: \"Confirmed Cases\" },\r\n    { type: \"deaths\", name: \"Deaths\" },\r\n    { type: \"recovered\", name: \"Recovered Cases\" },\r\n  ],\r\n  historicalProvince: []\r\n};\r\n\r\nconst CanadaContext = React.createContext();\r\n\r\nexport const CanadaContextProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n  //**fetch data for Canada */\r\n\r\n  const fetchCanada = async () => {\r\n    let url = \"https://disease.sh/v3/covid-19/countries/CA?strict=true\";\r\n    const data = await fetchThings(url);\r\n    dispatch({ type: LOAD_CANADA_DATA, payload: data });\r\n  };\r\n  //**fetch data of all provinces in Canada */\r\n  const fetchProvinces = async () => {\r\n    let url = \"https://disease.sh/v3/covid-19/jhucsse\";\r\n    let data = await fetchThings(url);\r\n    data = data.filter((a) => a.country === \"Canada\");\r\n    dispatch({ type: LOAD_ALL_PROVINCES_DATA, payload: data });\r\n  };\r\n\r\n\r\n  //**set type input */\r\n\r\n  const setTypeInput = (e) => {\r\n    dispatch({ type: SET_TYPE_INPUT, payload: e.target.value });\r\n  };\r\n\r\n  /**Set province input for dropdown menu */\r\n\r\n  const setProvinceInput = (e) => {\r\n    dispatch({ type: SET_PROVINCE_INPUT, payload: e.target.value })\r\n  }\r\n\r\n  /**Set case type  */\r\n  const setCaseType = (type) => {\r\n    dispatch({ type: SET_CASE_TYPE, payload: type })\r\n  }\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    const fetchHistorical = async () => {\r\n      let url = \"\";\r\n      let chartData;\r\n      try {\r\n        if (state.provinceInput === \"Canada\") {\r\n          url = `https://disease.sh/v3/covid-19/historical/CA?lastdays=120`;\r\n          const data = await fetchThings(url);\r\n          chartData = buildChartData(data.timeline, state.caseType);\r\n        } else {\r\n          const dataSchema = {\r\n            cases: [],\r\n            deaths: [],\r\n            recovered: []\r\n          }\r\n          url = `https://api.opencovid.ca/timeseries`;\r\n          const data = await fetchThings(url);\r\n          dataSchema.cases = data.cases.filter(d => d.province === state.provinceInput).slice(-120);\r\n          dataSchema.deaths = data.mortality.filter(d=> d.province === state.provinceInput).slice(-120);\r\n          dataSchema.recovered = data.recovered.filter(d => d.province === state.provinceInput).slice(-120);\r\n          console.log(dataSchema)\r\n          if (data.message) {\r\n            chartData = data; // in case there is no available data, it will return a message\r\n          } else {\r\n            chartData = buildChartData(data.timeline, state.caseType);\r\n          }\r\n        }\r\n    \r\n        dispatch({ type: LOAD_HISTORICAL_PROVINCES, payload: chartData });\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    };\r\n  \r\n    fetchHistorical();\r\n  }, [state.provinceInput, state.provinces, state.caseType]);\r\n\r\n  console.log(state.provinceInput)\r\n  \r\n  useEffect(() => {\r\n    fetchCanada();\r\n    fetchProvinces();\r\n  }, []);\r\n  return (\r\n    //to pass the state from the context Provider\r\n    <CanadaContext.Provider value={{ ...state, setTypeInput, setProvinceInput, setCaseType }}>\r\n      {children}\r\n    </CanadaContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useCanadaContext = () => {\r\n  return useContext(CanadaContext);\r\n};\r\n","D:\\PRJ_covidTracker\\src\\context\\globalContext.js",[],"D:\\PRJ_covidTracker\\src\\pages\\GlobalCovidPage.js",[],"D:\\PRJ_covidTracker\\src\\pages\\CanadaCovidPage.js",["84","85","86"],"import React from \"react\";\r\nimport {\r\n  MenuItem,\r\n  FormControl,\r\n  Select,\r\n  Card,\r\n  CardContent,\r\n} from \"@material-ui/core\";\r\nimport { useGlobalContext } from \"../context/globalContext\";\r\nimport { useCanadaContext } from \"../context/canadaContext\";\r\nimport \"../App.css\";\r\nimport Navbar from \"../components/NavBar\";\r\nimport InfoBox from \"../components/InfoBox\";\r\nimport InfoBoxes from \"../components/InfoBoxes\"\r\nimport Table from \"../components/Table\";\r\nimport Map from \"../components/Map/Map\";\r\nimport LineGraph from \"../components/LineGraph\";\r\nimport numeral from \"numeral\";\r\nimport \"leaflet/dist/leaflet.css\";\r\n\r\nfunction CanadaCovidPage() {\r\n\r\n  const {\r\n    provinces,\r\n    historicalProvince,\r\n    caseType,\r\n    provinceInput,\r\n    setProvinceInput,\r\n    typeInput,\r\n    typeInputData,\r\n    setTypeInput,\r\n  } = useCanadaContext();\r\n\r\n  console.log(caseType)\r\n  return (\r\n    <div className=\"app\">\r\n      <Navbar />\r\n      <div className=\"container\">\r\n        <div className=\"app__left\">\r\n          <div className=\"app__header\">\r\n            <FormControl className=\"app_dropDown\">\r\n              <Select\r\n                variant=\"outlined\"\r\n                value={provinceInput}\r\n                onChange={(e) => setProvinceInput(e)}\r\n              >\r\n                <MenuItem value=\"Canada\" selected=\"selected\">\r\n                  Canada\r\n                </MenuItem>\r\n                {provinces.map((p, index) => {\r\n                  return (\r\n                    <MenuItem value={p.province} key={index}>\r\n                      {p.province}\r\n                    </MenuItem>\r\n                  );\r\n                })}\r\n              </Select>\r\n            </FormControl>\r\n          </div>\r\n          <InfoBoxes />\r\n          <Map />\r\n        </div>\r\n        <Card className=\"app__right\">\r\n          <CardContent>\r\n            <div className=\"app__information\">\r\n              <div className=\"app__right__header\">\r\n                <div id=\"title_header\">\r\n                  <h4>Chart Of Provinces Sorted By</h4>\r\n                </div>\r\n                <FormControl className=\"app_dropDown\">\r\n                  <Select\r\n                    variant=\"outlined\"\r\n                    value={typeInput}\r\n                    onChange={(e) => setTypeInput(e)}\r\n                  >\r\n                    {typeInputData.map((typeInput, index) => {\r\n                      return (\r\n                        <MenuItem value={typeInput.type} key={index}>\r\n                          {typeInput.name}\r\n                        </MenuItem>\r\n                      );\r\n                    })}\r\n                  </Select>\r\n                </FormControl>\r\n              </div>\r\n              <Table data = {provinces} typeInput = {typeInput}></Table>\r\n              <h4 className=\"graph-header\">{provinceInput} line graph</h4>\r\n              <LineGraph dataChart = {historicalProvince} caseType = {caseType}/>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CanadaCovidPage;\r\n","D:\\PRJ_covidTracker\\src\\actions\\canadaActions.js",[],"D:\\PRJ_covidTracker\\src\\utils\\helpers.js",[],"D:\\PRJ_covidTracker\\src\\reducer\\canadaReducer.js",["87"],"import {\r\n  LOAD_ALL_PROVINCES_DATA,\r\n  LOAD_CANADA_DATA,\r\n  SET_CASE_TYPE,\r\n  SET_PROVINCE_INPUT,\r\n  LOAD_HISTORICAL_CANADA,\r\n  LOAD_HISTORICAL_PROVINCES,\r\n  SET_TYPE_INPUT\r\n} from \"../actions/canadaActions\";\r\n\r\nconst reducer = (state, action) => {\r\n    if (action.type === LOAD_CANADA_DATA){\r\n        return{\r\n            ...state,\r\n            canada: action.payload\r\n        }\r\n    }\r\n\r\n    if (action.type === LOAD_ALL_PROVINCES_DATA){\r\n        return{\r\n            ...state,\r\n            provinces: action.payload\r\n        }\r\n    }\r\n\r\n    if (action.type === SET_TYPE_INPUT){\r\n        return{\r\n          ...state,\r\n          typeInput: action.payload\r\n        }\r\n      }\r\n    \r\n    if (action.type === SET_PROVINCE_INPUT){\r\n      return{\r\n        ...state,\r\n        provinceInput: action.payload\r\n      }\r\n    }\r\n\r\n    if (action.type === SET_CASE_TYPE){\r\n      return{\r\n        ...state,\r\n        caseType: action.payload\r\n      }\r\n    }\r\n\r\n    if (action.type === LOAD_HISTORICAL_PROVINCES){\r\n      \r\n      return{\r\n        ...state,\r\n        historicalProvince: action.payload\r\n      }\r\n    }\r\n\r\n    return state;\r\n    \r\n};\r\n\r\nexport default reducer;\r\n","D:\\PRJ_covidTracker\\src\\reducer\\globalReducer.js",[],"D:\\PRJ_covidTracker\\src\\actions\\globalActions.js",[],"D:\\PRJ_covidTracker\\src\\components\\InfoBox.js",[],"D:\\PRJ_covidTracker\\src\\components\\LineGraph.js",[],"D:\\PRJ_covidTracker\\src\\components\\Table.js",["88","89"],"import React from 'react'\r\nimport './Table.css'\r\nimport numeral from 'numeral'\r\nimport { useGlobalContext } from '../context/globalContext'\r\nimport { useCanadaContext } from '../context/canadaContext'\r\nimport { sortDataCountries, sortDataProvinces } from '../utils/helpers'\r\nfunction Table(props) {\r\n    let tempData = [...props.data];\r\n    tempData.length > 100 ? tempData = sortDataCountries(tempData, props.typeInput) : tempData = sortDataProvinces(tempData, props.typeInput);\r\n    return (\r\n        <div className='table'>\r\n            {\r\n                tempData.length > 100 ? tempData.map(country => {\r\n                    return (\r\n                        <tr>\r\n                            <td>{country.country}</td>\r\n                            <td>\r\n                                <strong>{numeral(country[props.typeInput]).format(\"0,0\")}</strong>\r\n                            </td>\r\n                        </tr>\r\n                    )\r\n                }) :\r\n                    tempData.map(p => {\r\n                        return (\r\n                            <tr>\r\n                                <td>{p.province}</td>\r\n                                <td>\r\n                                    <strong>{numeral(p.stats[props.typeInput]).format(\"0,0\")}</strong>\r\n                                </td>\r\n                            </tr>\r\n                        )\r\n                    })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","D:\\PRJ_covidTracker\\src\\components\\NavBar.js",[],"D:\\PRJ_covidTracker\\src\\components\\Map\\Map.js",[],"D:\\PRJ_covidTracker\\src\\components\\Map\\ChangeView.js",[],["90","91"],"D:\\PRJ_covidTracker\\src\\components\\InfoBoxes.js",[],{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":1,"column":17,"nodeType":"98","messageId":"99","endLine":1,"endColumn":25},{"ruleId":"96","severity":1,"message":"100","line":9,"column":3,"nodeType":"98","messageId":"99","endLine":9,"endColumn":25},{"ruleId":"96","severity":1,"message":"101","line":9,"column":10,"nodeType":"98","messageId":"99","endLine":9,"endColumn":26},{"ruleId":"96","severity":1,"message":"102","line":13,"column":8,"nodeType":"98","messageId":"99","endLine":13,"endColumn":15},{"ruleId":"96","severity":1,"message":"103","line":18,"column":8,"nodeType":"98","messageId":"99","endLine":18,"endColumn":15},{"ruleId":"96","severity":1,"message":"100","line":6,"column":3,"nodeType":"98","messageId":"99","endLine":6,"endColumn":25},{"ruleId":"96","severity":1,"message":"101","line":4,"column":10,"nodeType":"98","messageId":"99","endLine":4,"endColumn":26},{"ruleId":"96","severity":1,"message":"104","line":5,"column":10,"nodeType":"98","messageId":"99","endLine":5,"endColumn":26},{"ruleId":"92","replacedBy":"105"},{"ruleId":"94","replacedBy":"106"},"no-native-reassign",["107"],"no-negated-in-lhs",["108"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'LOAD_HISTORICAL_CANADA' is defined but never used.","'useGlobalContext' is defined but never used.","'InfoBox' is defined but never used.","'numeral' is defined but never used.","'useCanadaContext' is defined but never used.",["107"],["108"],"no-global-assign","no-unsafe-negation"]
