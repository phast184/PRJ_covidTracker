[{"C:\\Users\\alexei\\PRJ_covidTracker\\src\\index.js":"1","C:\\Users\\alexei\\PRJ_covidTracker\\src\\App.js":"2","C:\\Users\\alexei\\PRJ_covidTracker\\src\\context\\globalContext.js":"3","C:\\Users\\alexei\\PRJ_covidTracker\\src\\context\\canadaContext.js":"4","C:\\Users\\alexei\\PRJ_covidTracker\\src\\pages\\GlobalCovidPage.js":"5","C:\\Users\\alexei\\PRJ_covidTracker\\src\\pages\\CanadaCovidPage.js":"6","C:\\Users\\alexei\\PRJ_covidTracker\\src\\reducer\\globalReducer.js":"7","C:\\Users\\alexei\\PRJ_covidTracker\\src\\reducer\\canadaReducer.js":"8","C:\\Users\\alexei\\PRJ_covidTracker\\src\\utils\\helpers.js":"9","C:\\Users\\alexei\\PRJ_covidTracker\\src\\actions\\globalActions.js":"10","C:\\Users\\alexei\\PRJ_covidTracker\\src\\actions\\canadaActions.js":"11","C:\\Users\\alexei\\PRJ_covidTracker\\src\\components\\Table.js":"12","C:\\Users\\alexei\\PRJ_covidTracker\\src\\components\\NavBar.js":"13","C:\\Users\\alexei\\PRJ_covidTracker\\src\\components\\InfoBox.js":"14","C:\\Users\\alexei\\PRJ_covidTracker\\src\\components\\LineGraph.js":"15","C:\\Users\\alexei\\PRJ_covidTracker\\src\\components\\sidebarContainer\\sidebarContainer.js":"16","C:\\Users\\alexei\\PRJ_covidTracker\\src\\components\\InfoBoxes.js":"17","C:\\Users\\alexei\\PRJ_covidTracker\\src\\components\\Map\\Map.js":"18","C:\\Users\\alexei\\PRJ_covidTracker\\src\\components\\Map\\ChangeView.js":"19","C:\\Users\\alexei\\PRJ_covidTracker\\src\\components\\SideDrawer\\SideDrawer.js":"20","C:\\Users\\alexei\\PRJ_covidTracker\\src\\components\\DrawerToggleButton\\DrawerToggleButton.js":"21"},{"size":470,"mtime":1616317529000,"results":"22","hashOfConfig":"23"},{"size":483,"mtime":1617046529148,"results":"24","hashOfConfig":"23"},{"size":3574,"mtime":1616317529000,"results":"25","hashOfConfig":"23"},{"size":2080,"mtime":1616317529000,"results":"26","hashOfConfig":"23"},{"size":3940,"mtime":1617210298420,"results":"27","hashOfConfig":"23"},{"size":4061,"mtime":1617210663684,"results":"28","hashOfConfig":"23"},{"size":1851,"mtime":1616317529000,"results":"29","hashOfConfig":"23"},{"size":804,"mtime":1616317529000,"results":"30","hashOfConfig":"23"},{"size":2356,"mtime":1616317529000,"results":"31","hashOfConfig":"23"},{"size":469,"mtime":1616317529000,"results":"32","hashOfConfig":"23"},{"size":332,"mtime":1616317529000,"results":"33","hashOfConfig":"23"},{"size":1416,"mtime":1616317529000,"results":"34","hashOfConfig":"23"},{"size":624,"mtime":1617045773303,"results":"35","hashOfConfig":"23"},{"size":882,"mtime":1616317529000,"results":"36","hashOfConfig":"23"},{"size":1672,"mtime":1616317529000,"results":"37","hashOfConfig":"23"},{"size":807,"mtime":1617210418229,"results":"38","hashOfConfig":"23"},{"size":1714,"mtime":1618246359541,"results":"39","hashOfConfig":"23"},{"size":1353,"mtime":1616317529000,"results":"40","hashOfConfig":"23"},{"size":189,"mtime":1616317529000,"results":"41","hashOfConfig":"23"},{"size":842,"mtime":1617213704277,"results":"42","hashOfConfig":"23"},{"size":329,"mtime":1617045663173,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"b59za",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"46"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"46"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"C:\\Users\\alexei\\PRJ_covidTracker\\src\\index.js",[],["93","94"],"C:\\Users\\alexei\\PRJ_covidTracker\\src\\App.js",[],"C:\\Users\\alexei\\PRJ_covidTracker\\src\\context\\globalContext.js",[],"C:\\Users\\alexei\\PRJ_covidTracker\\src\\context\\canadaContext.js",["95","96"],"import React, { useState, useEffect, useReducer, useContext } from \"react\";\r\nimport { fetchThings, buildChartData } from \"../utils/helpers\";\r\nimport reducer from \"../reducer/canadaReducer\";\r\nimport {\r\n  LOAD_ALL_PROVINCES_DATA,\r\n  LOAD_CANADA_DATA,\r\n  SET_CASE_TYPE,\r\n  SET_PROVINCE_INPUT,\r\n  LOAD_HISTORICAL_CANADA,\r\n  LOAD_HISTORICAL_PROVINCES,\r\n  SET_TYPE_INPUT,\r\n} from \"../actions/canadaActions\";\r\nimport { } from \"../actions/canadaActions\";\r\n\r\nconst initialState = {\r\n  provinces: [],\r\n  canada: [],\r\n  caseType: \"cases\",\r\n  provinceInput: \"Canada\",\r\n  typeInput: \"confirmed\",\r\n  typeInputData: [\r\n    { type: \"confirmed\", name: \"Confirmed Cases\" },\r\n    { type: \"deaths\", name: \"Deaths\" },\r\n    { type: \"recovered\", name: \"Recovered Cases\" },\r\n  ],\r\n  historicalProvince: []\r\n};\r\n\r\nconst CanadaContext = React.createContext();\r\n\r\nexport const CanadaContextProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n  //**fetch data for Canada */\r\n\r\n  const fetchCanada = async () => {\r\n    let url = \"https://disease.sh/v3/covid-19/countries/CA?strict=true\";\r\n    const data = await fetchThings(url);\r\n    dispatch({ type: LOAD_CANADA_DATA, payload: data });\r\n  };\r\n  //**fetch data of all provinces in Canada */\r\n  const fetchProvinces = async () => {\r\n    let url = \"https://disease.sh/v3/covid-19/jhucsse\";\r\n    let data = await fetchThings(url);\r\n    data = data.filter((a) => a.country === \"Canada\");\r\n    dispatch({ type: LOAD_ALL_PROVINCES_DATA, payload: data });\r\n  };\r\n\r\n\r\n  //**set type input */\r\n\r\n  const setTypeInput = (e) => {\r\n    dispatch({ type: SET_TYPE_INPUT, payload: e.target.value });\r\n  };\r\n\r\n  /**Set province input for dropdown menu */\r\n\r\n  const setProvinceInput = (e) => {\r\n    dispatch({ type: SET_PROVINCE_INPUT, payload: e.target.value })\r\n  }\r\n\r\n  /**Set case type  */\r\n  const setCaseType = (type) => {\r\n    dispatch({ type: SET_CASE_TYPE, payload: type })\r\n  }\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    const fetchHistorical = async () => {\r\n      let url = \"\";\r\n      let chartData;\r\n      try {\r\n        if (state.provinceInput === \"Canada\") {\r\n          url = `https://disease.sh/v3/covid-19/historical/CA?lastdays=120`;\r\n          const data = await fetchThings(url);\r\n          chartData = buildChartData(data.timeline, state.caseType);\r\n        } else {\r\n          const dataSchema = {\r\n            cases: [],\r\n            deaths: [],\r\n            recovered: []\r\n          }\r\n          url = `https://api.opencovid.ca/timeseries`;\r\n          const data = await fetchThings(url);\r\n          dataSchema.cases = data.cases.filter(d => d.province === state.provinceInput).slice(-120);\r\n          dataSchema.deaths = data.mortality.filter(d=> d.province === state.provinceInput).slice(-120);\r\n          dataSchema.recovered = data.recovered.filter(d => d.province === state.provinceInput).slice(-120);\r\n          console.log(dataSchema)\r\n          if (data.message) {\r\n            chartData = data; // in case there is no available data, it will return a message\r\n          } else {\r\n            chartData = buildChartData(data.timeline, state.caseType);\r\n          }\r\n        }\r\n    \r\n        dispatch({ type: LOAD_HISTORICAL_PROVINCES, payload: chartData });\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    };\r\n  \r\n    fetchHistorical();\r\n  }, [state.provinceInput, state.provinces, state.caseType]);\r\n\r\n  console.log(state.provinceInput)\r\n  \r\n  useEffect(() => {\r\n    fetchCanada();\r\n    fetchProvinces();\r\n  }, []);\r\n  return (\r\n    //to pass the state from the context Provider\r\n    <CanadaContext.Provider value={{ ...state, setTypeInput, setProvinceInput, setCaseType }}>\r\n      {children}\r\n    </CanadaContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useCanadaContext = () => {\r\n  return useContext(CanadaContext);\r\n};\r\n","C:\\Users\\alexei\\PRJ_covidTracker\\src\\pages\\GlobalCovidPage.js",["97"],"import React from \"react\";\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\nimport { useGlobalContext } from \"../context/globalContext\";\nimport \"../App.css\";\nimport Navbar from \"../components/NavBar\";\nimport InfoBox from \"../components/InfoBox\";\nimport Table from \"../components/Table\";\nimport Map from \"../components/Map/Map\";\nimport LineGraph from \"../components/LineGraph\";\nimport numeral from \"numeral\";\nimport \"leaflet/dist/leaflet.css\";\nimport SidebarContainer from \"../components/sidebarContainer/sidebarContainer\"\n\nfunction App() {\n  // const [country, setCountry] = useState(\"worldwide\");\n\n  \n  const {\n    country,\n    countries,\n    countryInput,\n    setCountryInput,\n    setCaseType,\n    caseType,\n    typeInputData,\n    typeInput,\n    setTypeInput,\n  } = useGlobalContext();\n  console.log(countries)\n  console.log(typeInput);\n  return (\n    <div className=\"app\">\n      <SidebarContainer />\n      <div className=\"container\">\n        <div className=\"app__left\">\n          <div className=\"app__header\">\n            <FormControl className=\"app_dropDown\">\n              <Select\n                variant=\"outlined\"\n                value={countryInput}\n                onChange={(e) => setCountryInput(e)}\n              >\n                <MenuItem value=\"worldwide\" selected=\"selected\">\n                  Worldwide\n                </MenuItem>\n                {countries.map((country, index) => {\n                  return (\n                    <MenuItem value={country.countryInfo.iso2} key={index}>\n                      {country.country}\n                    </MenuItem>\n                  );\n                })}\n              </Select>\n            </FormControl>\n          </div>\n          <div className=\"app__stat\">\n            <InfoBox\n              title=\"Today Coronavirus Cases\"\n              onClick={(e) => setCaseType(\"cases\")}\n              active={caseType === \"cases\"}\n              cases={numeral(country.todayCases).format(\"0.0a\")}\n              total={numeral(country.cases).format(\"0.0a\")}\n              isRed\n            />\n            <InfoBox\n              title=\"Today Recovered People\"\n              cases={numeral(country.todayRecovered).format(\"0.0a\")}\n              onClick={(e) => setCaseType(\"recovered\")}\n              active={caseType === \"recovered\"}\n              total={numeral(country.recovered).format(\"0.0a\")}\n            />\n            <InfoBox\n              title=\"Today Death\"\n              cases={numeral(country.todayDeaths).format(\"0.0a\")}\n              onClick={(e) => setCaseType(\"deaths\")}\n              active={caseType === \"deaths\"}\n              total={numeral(country.deaths).format(\"0.0a\")}\n              isRed\n            />\n          </div>\n          <Map />\n        </div>\n        <Card className=\"app__right\">\n          <CardContent>\n            <div className=\"app__information\">\n              <div className=\"app__right__header\">\n                <div id=\"title_header\">\n                  <h4>Live Stats By Country</h4>\n                </div>\n                <FormControl className=\"app_dropDown\">\n                  <Select\n                    variant=\"outlined\"\n                    value={typeInput}\n                    onChange={(e) => setTypeInput(e)}\n                  >\n                    {typeInputData.map((typeInput, index) => {\n                      return (\n                        <MenuItem value={typeInput.type} key={index}>\n                          {typeInput.name}\n                        </MenuItem>\n                      );\n                    })}\n                  </Select>\n                </FormControl>\n              </div>\n              <Table data = {countries} typeInput = {typeInput}></Table>\n              <h4 className=\"graph-header\">{countryInput} line graph</h4>\n              <LineGraph />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\alexei\\PRJ_covidTracker\\src\\pages\\CanadaCovidPage.js",["98","99","100","101"],"import React from \"react\";\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\nimport { useGlobalContext } from \"../context/globalContext\";\nimport { useCanadaContext } from \"../context/canadaContext\";\nimport \"../App.css\";\nimport Navbar from \"../components/NavBar\";\nimport InfoBox from \"../components/InfoBox\";\nimport Table from \"../components/Table\";\nimport Map from \"../components/Map/Map\";\nimport LineGraph from \"../components/LineGraph\";\nimport numeral from \"numeral\";\nimport \"leaflet/dist/leaflet.css\";\nimport SidebarContainer from \"../components/sidebarContainer/sidebarContainer\"\n\nfunction CanadaCovidPage() {\n  // const [country, setCountry] = useState(\"worldwide\");\n  const {\n    country,\n    countries,\n    countryInput,\n    setCountryInput,\n    setCaseType,\n    caseType,\n  } = useGlobalContext();\n\n  const {\n    provinces,\n    canada,\n    provinceInput,\n    setProvinceInput,\n    typeInput,\n    typeInputData,\n    setTypeInput,\n  } = useCanadaContext();\n\n  console.log(typeInput)\n  return (\n    <div className=\"app\">\n      <SidebarContainer />\n      <div className=\"container\">\n        <div className=\"app__left\">\n          <div className=\"app__header\">\n            <FormControl className=\"app_dropDown\">\n              <Select\n                variant=\"outlined\"\n                value={provinceInput}\n                onChange={(e) => setProvinceInput(e)}\n              >\n                <MenuItem value=\"Canada\" selected=\"selected\">\n                  Canada\n                </MenuItem>\n                {provinces.map((p, index) => {\n                  return (\n                    <MenuItem value={p.province} key={index}>\n                      {p.province}\n                    </MenuItem>\n                  );\n                })}\n              </Select>\n            </FormControl>\n          </div>\n          <div className=\"app__stat\">\n            <InfoBox\n              title=\"Coronavirus Cases\"\n              onClick={(e) => setCaseType(\"cases\")}\n              active={caseType === \"cases\"}\n              cases={numeral(country.todayCases).format(\"0.0a\")}\n              total={numeral(country.cases).format(\"0.0a\")}\n              isRed\n            />\n            <InfoBox\n              title=\"Recovered People\"\n              cases={numeral(country.todayRecovered).format(\"0.0a\")}\n              onClick={(e) => setCaseType(\"recovered\")}\n              active={caseType === \"recovered\"}\n              total={numeral(country.recovered).format(\"0.0a\")}\n            />\n            <InfoBox\n              title=\"Death\"\n              cases={numeral(country.todayDeaths).format(\"0.0a\")}\n              onClick={(e) => setCaseType(\"deaths\")}\n              active={caseType === \"deaths\"}\n              total={numeral(country.deaths).format(\"0.0a\")}\n              isRed\n            />\n          </div>\n          <Map />\n        </div>\n        <Card className=\"app__right\">\n          <CardContent>\n            <div className=\"app__information\">\n              <div className=\"app__right__header\">\n                <div id=\"title_header\">\n                  <h4>Chart Of Provinces Sorted By</h4>\n                </div>\n                <FormControl className=\"app_dropDown\">\n                  <Select\n                    variant=\"outlined\"\n                    value={typeInput}\n                    onChange={(e) => setTypeInput(e)}\n                  >\n                    {typeInputData.map((typeInput, index) => {\n                      return (\n                        <MenuItem value={typeInput.type} key={index}>\n                          {typeInput.name}\n                        </MenuItem>\n                      );\n                    })}\n                  </Select>\n                </FormControl>\n              </div>\n              <Table data = {provinces} typeInput = {typeInput}></Table>\n              <h4 className=\"graph-header\">{countryInput} line graph</h4>\n              <LineGraph />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n\nexport default CanadaCovidPage;\n","C:\\Users\\alexei\\PRJ_covidTracker\\src\\reducer\\globalReducer.js",[],"C:\\Users\\alexei\\PRJ_covidTracker\\src\\reducer\\canadaReducer.js",["102"],"import {\r\n  LOAD_ALL_PROVINCES_DATA,\r\n  LOAD_CANADA_DATA,\r\n  SET_CASE_TYPE,\r\n  SET_PROVINCE_INPUT,\r\n  LOAD_HISTORICAL_CANADA,\r\n  LOAD_HISTORICAL_PROVINCES,\r\n  SET_TYPE_INPUT\r\n} from \"../actions/canadaActions\";\r\n\r\nconst reducer = (state, action) => {\r\n    if (action.type === LOAD_CANADA_DATA){\r\n        return{\r\n            ...state,\r\n            canada: action.payload\r\n        }\r\n    }\r\n\r\n    if (action.type === LOAD_ALL_PROVINCES_DATA){\r\n        return{\r\n            ...state,\r\n            provinces: action.payload\r\n        }\r\n    }\r\n\r\n    if (action.type === SET_TYPE_INPUT){\r\n        return{\r\n          ...state,\r\n          typeInput: action.payload\r\n        }\r\n      }\r\n    \r\n    if (action.type === SET_PROVINCE_INPUT){\r\n      return{\r\n        ...state,\r\n        provinceInput: action.payload\r\n      }\r\n    }\r\n\r\n    if (action.type === SET_CASE_TYPE){\r\n      return{\r\n        ...state,\r\n        caseType: action.payload\r\n      }\r\n    }\r\n\r\n    if (action.type === LOAD_HISTORICAL_PROVINCES){\r\n      \r\n      return{\r\n        ...state,\r\n        historicalProvince: action.payload\r\n      }\r\n    }\r\n\r\n    return state;\r\n    \r\n};\r\n\r\nexport default reducer;\r\n","C:\\Users\\alexei\\PRJ_covidTracker\\src\\utils\\helpers.js",[],"C:\\Users\\alexei\\PRJ_covidTracker\\src\\actions\\globalActions.js",[],"C:\\Users\\alexei\\PRJ_covidTracker\\src\\actions\\canadaActions.js",[],"C:\\Users\\alexei\\PRJ_covidTracker\\src\\components\\Table.js",["103","104"],"import React from 'react'\r\nimport './Table.css'\r\nimport numeral from 'numeral'\r\nimport { useGlobalContext } from '../context/globalContext'\r\nimport { useCanadaContext } from '../context/canadaContext'\r\nimport { sortDataCountries, sortDataProvinces } from '../utils/helpers'\r\nfunction Table(props) {\r\n    let tempData = [...props.data];\r\n    tempData.length > 100 ? tempData = sortDataCountries(tempData, props.typeInput) : tempData = sortDataProvinces(tempData, props.typeInput);\r\n    return (\r\n        <div className='table'>\r\n            {\r\n                tempData.length > 100 ? tempData.map(country => {\r\n                    return (\r\n                        <tr>\r\n                            <td>{country.country}</td>\r\n                            <td>\r\n                                <strong>{numeral(country[props.typeInput]).format(\"0,0\")}</strong>\r\n                            </td>\r\n                        </tr>\r\n                    )\r\n                }) :\r\n                    tempData.map(p => {\r\n                        return (\r\n                            <tr>\r\n                                <td>{p.province}</td>\r\n                                <td>\r\n                                    <strong>{numeral(p.stats[props.typeInput]).format(\"0,0\")}</strong>\r\n                                </td>\r\n                            </tr>\r\n                        )\r\n                    })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","C:\\Users\\alexei\\PRJ_covidTracker\\src\\components\\NavBar.js",[],"C:\\Users\\alexei\\PRJ_covidTracker\\src\\components\\InfoBox.js",[],"C:\\Users\\alexei\\PRJ_covidTracker\\src\\components\\LineGraph.js",[],"C:\\Users\\alexei\\PRJ_covidTracker\\src\\components\\sidebarContainer\\sidebarContainer.js",[],"C:\\Users\\alexei\\PRJ_covidTracker\\src\\components\\InfoBoxes.js",[],"C:\\Users\\alexei\\PRJ_covidTracker\\src\\components\\Map\\Map.js",[],"C:\\Users\\alexei\\PRJ_covidTracker\\src\\components\\Map\\ChangeView.js",[],"C:\\Users\\alexei\\PRJ_covidTracker\\src\\components\\SideDrawer\\SideDrawer.js",[],["105","106"],"C:\\Users\\alexei\\PRJ_covidTracker\\src\\components\\DrawerToggleButton\\DrawerToggleButton.js",[],{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","severity":1,"message":"112","line":1,"column":17,"nodeType":"113","messageId":"114","endLine":1,"endColumn":25},{"ruleId":"111","severity":1,"message":"115","line":9,"column":3,"nodeType":"113","messageId":"114","endLine":9,"endColumn":25},{"ruleId":"111","severity":1,"message":"116","line":11,"column":8,"nodeType":"113","messageId":"114","endLine":11,"endColumn":14},{"ruleId":"111","severity":1,"message":"116","line":12,"column":8,"nodeType":"113","messageId":"114","endLine":12,"endColumn":14},{"ruleId":"111","severity":1,"message":"117","line":25,"column":5,"nodeType":"113","messageId":"114","endLine":25,"endColumn":14},{"ruleId":"111","severity":1,"message":"118","line":27,"column":5,"nodeType":"113","messageId":"114","endLine":27,"endColumn":20},{"ruleId":"111","severity":1,"message":"119","line":34,"column":5,"nodeType":"113","messageId":"114","endLine":34,"endColumn":11},{"ruleId":"111","severity":1,"message":"115","line":6,"column":3,"nodeType":"113","messageId":"114","endLine":6,"endColumn":25},{"ruleId":"111","severity":1,"message":"120","line":4,"column":10,"nodeType":"113","messageId":"114","endLine":4,"endColumn":26},{"ruleId":"111","severity":1,"message":"121","line":5,"column":10,"nodeType":"113","messageId":"114","endLine":5,"endColumn":26},{"ruleId":"107","replacedBy":"122"},{"ruleId":"109","replacedBy":"123"},"no-native-reassign",["124"],"no-negated-in-lhs",["125"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'LOAD_HISTORICAL_CANADA' is defined but never used.","'Navbar' is defined but never used.","'countries' is assigned a value but never used.","'setCountryInput' is assigned a value but never used.","'canada' is assigned a value but never used.","'useGlobalContext' is defined but never used.","'useCanadaContext' is defined but never used.",["124"],["125"],"no-global-assign","no-unsafe-negation"]